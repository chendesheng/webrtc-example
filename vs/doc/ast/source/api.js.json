{
  "type": "File",
  "start": 0,
  "end": 13107,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 283,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 13107,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 283,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "Identifier",
        "start": 13055,
        "end": 13078,
        "loc": {
          "start": {
            "line": 280,
            "column": 0
          },
          "end": {
            "line": 280,
            "column": 23
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 13061,
            "end": 13077,
            "loc": {
              "start": {
                "line": 280,
                "column": 6
              },
              "end": {
                "line": 280,
                "column": 22
              }
            },
            "id": {
              "type": "Identifier",
              "start": 13061,
              "end": 13071,
              "loc": {
                "start": {
                  "line": 280,
                  "column": 6
                },
                "end": {
                  "line": 280,
                  "column": 16
                },
                "identifierName": "Comm100API"
              },
              "name": "Comm100API",
              "leadingComments": null
            },
            "init": {
              "type": "ObjectExpression",
              "start": 13074,
              "end": 13077,
              "loc": {
                "start": {
                  "line": 280,
                  "column": 19
                },
                "end": {
                  "line": 280,
                  "column": 22
                }
              },
              "properties": []
            },
            "leadingComments": null
          }
        ],
        "kind": "const",
        "leadingComments": [],
        "name": "_",
        "trailingComments": []
      },
      {
        "type": "Identifier",
        "start": 13080,
        "end": 13106,
        "loc": {
          "start": {
            "line": 282,
            "column": 0
          },
          "end": {
            "line": 282,
            "column": 26
          }
        },
        "declaration": {
          "type": "Identifier",
          "start": 13095,
          "end": 13105,
          "loc": {
            "start": {
              "line": 282,
              "column": 15
            },
            "end": {
              "line": 282,
              "column": 25
            },
            "identifierName": "Comm100API"
          },
          "name": "Comm100API"
        },
        "name": "_",
        "leadingComments": [],
        "trailingComments": []
      },
      {
        "type": "ExportDefaultDeclaration",
        "start": 13080,
        "end": 13106,
        "loc": {
          "start": {
            "line": 282,
            "column": 0
          },
          "end": {
            "line": 282,
            "column": 26
          }
        },
        "declaration": {
          "type": "VariableDeclaration",
          "start": 13055,
          "end": 13078,
          "loc": {
            "start": {
              "line": 280,
              "column": 0
            },
            "end": {
              "line": 280,
              "column": 23
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 13061,
              "end": 13077,
              "loc": {
                "start": {
                  "line": 280,
                  "column": 6
                },
                "end": {
                  "line": 280,
                  "column": 22
                }
              },
              "id": {
                "type": "Identifier",
                "start": 13061,
                "end": 13071,
                "loc": {
                  "start": {
                    "line": 280,
                    "column": 6
                  },
                  "end": {
                    "line": 280,
                    "column": 16
                  },
                  "identifierName": "Comm100API"
                },
                "name": "Comm100API",
                "leadingComments": null
              },
              "init": {
                "type": "ObjectExpression",
                "start": 13074,
                "end": 13077,
                "loc": {
                  "start": {
                    "line": 280,
                    "column": 19
                  },
                  "end": {
                    "line": 280,
                    "column": 22
                  }
                },
                "properties": []
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": " eslint-disable ",
              "start": 0,
              "end": 20,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 1,
                  "column": 20
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} CustomVariable\n   * @property {string} name - Name of custom variable\n   * @property {string} value - Value of custom variable\n   ",
              "start": 24,
              "end": 183,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 2
                },
                "end": {
                  "line": 7,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} App\n   * @property {boolean} isMobile - Weather current running environment is mobile device.\n   * @property {function(list:CustomVariable[]):void} setCustomVariable - Set custom variable.\n   ",
              "start": 187,
              "end": 408,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 2
                },
                "end": {
                  "line": 13,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} onStatusChangeCallback\n   * @param {boolean} online - Whether current status is online\n   * @return {void}\n   ",
              "start": 412,
              "end": 553,
              "loc": {
                "start": {
                  "line": 15,
                  "column": 2
                },
                "end": {
                  "line": 19,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} Button\n   * @property {string} type - Type of button, possible options are:\n   * + monitor - monitor button\n   * + text - text button\n   * + static - static image button\n   * + float - float image button\n   * + mobile-image - mobile image button\n   * + mobile-text - mobile text button\n   * + adaptive - adaptive button\n   * @property {number} id - Campaign id of button\n   * @property {function():Promise<void,Error>} click - Simulate click behavior, the same as user click on this chat\n   * button.\n   * @property {function(callback:onStatusChangeCallback):void} onStatusChange - Register callback,\n   * which will be notified when status of current campaign changed.\n   ",
              "start": 557,
              "end": 1259,
              "loc": {
                "start": {
                  "line": 21,
                  "column": 2
                },
                "end": {
                  "line": 36,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} Agent\n   * @property {number} id - Uniq of agent\n   * @property {string} name - Display name of agent\n   * @property {string} avatar - Source of avatar image\n   * @property {string} bio - Bio description of agent\n   * @property {string} title - Title of agent\n   ",
              "start": 1263,
              "end": 1555,
              "loc": {
                "start": {
                  "line": 38,
                  "column": 2
                },
                "end": {
                  "line": 45,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} Invitation\n   * @property {string} type - Type of invitation, possible options are:\n   * + image - image invitation\n   * + adaptive - adaptive invitation\n   * + embedded-window - popup embedded chat window directly\n   * + mobile - mobile invitation\n    * @property {string} message - Message of current invitation.\n  * @property {Agent} agent - Agent info, will only be provided if it's a manual invitation.\n  * @property {function():Promise<void,Error>} accept - Accept invitation manually\n  * @property {function():Promise<void,Error>} refuse - Refuse invitation manually\n  * @property {function(callback:function)} onAccept - Register callback function when invitation is\n  * accepted (either by visitor or programatically).\n  * @property {function(callback:function)} onRefuse - Register callback function when invitation is\n  * refused.\n  ",
              "start": 1559,
              "end": 2432,
              "loc": {
                "start": {
                  "line": 47,
                  "column": 2
                },
                "end": {
                  "line": 62,
                  "column": 4
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} Message\n   * @property {string} type - Type of message\n   * @property {{type:string,name:string}} sender - Sender of message, possible types of sender are:\n   * + 'visitor'\n   * + 'agent'\n   * + 'system'\n   * @property {Date} time - Creating time of this message\n   * @property {string|object} content - Detailed content of message\n   ",
              "start": 2436,
              "end": 2800,
              "loc": {
                "start": {
                  "line": 64,
                  "column": 2
                },
                "end": {
                  "line": 73,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} MessagesOnChangeCallback\n   * @param {Array<Message>} messages - Current version of messages\n   * @return {Array<Message>} messages that should be displayed\n   ",
              "start": 2804,
              "end": 2995,
              "loc": {
                "start": {
                  "line": 75,
                  "column": 2
                },
                "end": {
                  "line": 79,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} SingleMessageOnChangeCallback\n   * @param {Message} message - Current version of message\n   * @param {number} index - Index of current message (in messasge list)\n   * @param {Array<Message>} messages - The complete message list\n   * @return {Message|null|Array<Message>} The transformed message. If `null` is provided, this\n   * message will be removed from list; if a list of message is provided, all of them will be rendered\n   * in list.\n   ",
              "start": 2999,
              "end": 3474,
              "loc": {
                "start": {
                  "line": 81,
                  "column": 2
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} ChatContent\n   * @property {function(callback:MessagesOnChangeCallback):void|{type:string,callback:SingleMessageOnChangeCallback}} onChange - Register callback function to\n   * transform message in list.\n   ",
              "start": 3478,
              "end": 3714,
              "loc": {
                "start": {
                  "line": 91,
                  "column": 2
                },
                "end": {
                  "line": 95,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} Field\n   * @property {string} type - Type of field, possible types are:\n   * + input - single line input field\n   * + textarea - Multiple line input field\n   * + radiolist - Group of radio buttons\n   * + checkbox - Single checkbox field\n   * + select - Dropdown list field\n   * + checkboxlist - Group of checkbox\n   * + file - Attachment upload field\n   * + email - Input field that accept email address\n   * + ticket - Input field that accept Comm100 Ticket number\n   * + department - Dropdown list that display available department\n   * + stars - Field for user to rate the chat (select from 1 to 5 stars by default)\n   * + custom - Custom field that display whatever user provide in element property\n   * @property {string} name - Label name of field\n   * @property {string|number} value - Value of current field\n   * @property {boolean} isSystem - Whether the field is system field\n   * @property {string} error - Potential error of this field with current value. This error might\n   * or might not be displayed, usually it will be displayed after field blur or before form submit.\n   * @property {Array<{type:string,name:string}>} options - Possible options of current field, only\n   * valid when type is `select`, `radiobox` or `checkbox`.\n   * @property {HTMLElement} element - Extended element, only valid when type is `custom`\n   ",
              "start": 3718,
              "end": 5086,
              "loc": {
                "start": {
                  "line": 97,
                  "column": 2
                },
                "end": {
                  "line": 120,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} FieldOnChangeCallback\n   * @param {Array<Field>} prevFields - Previous version of fields. For initial run, this will be\n   * default value.\n   * @param {Array<Field>} fields - Current version of fields.\n   * @return {Array<Field>} fields that should be displayed.\n   ",
              "start": 5090,
              "end": 5388,
              "loc": {
                "start": {
                  "line": 122,
                  "column": 2
                },
                "end": {
                  "line": 128,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} FieldOnClickCallback\n   * @param {string} id - Field id.\n   * @param {Array<Field>} fields - Current version of fields\n   * @return {Array<Field>} fields that should be displayed\n   ",
              "start": 5392,
              "end": 5605,
              "loc": {
                "start": {
                  "line": 130,
                  "column": 2
                },
                "end": {
                  "line": 135,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} FormData\n   * @property {string} name\n   * @property {string} email\n   * @property {string} phone\n   * @property {string} company\n   * @property {int} ticketId\n   * @property {int} departmentId\n   * @property {string} productService\n   * @property {Array<{name:string,value:string}>} customFields\n   ",
              "start": 5609,
              "end": 5938,
              "loc": {
                "start": {
                  "line": 137,
                  "column": 2
                },
                "end": {
                  "line": 147,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} OnSubmitCallback\n   * @param {FormData} formData - Current form data.\n   * @return {Object} form data that should be submitted.\n   ",
              "start": 5942,
              "end": 6104,
              "loc": {
                "start": {
                  "line": 149,
                  "column": 2
                },
                "end": {
                  "line": 153,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} OnErrorCallback\n   * @param {Error} error - Occured error.\n   ",
              "start": 6108,
              "end": 6201,
              "loc": {
                "start": {
                  "line": 155,
                  "column": 2
                },
                "end": {
                  "line": 158,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} Form\n   * @property {function(callback:FieldOnChangeCallback):Form} onChange - Transform original fields to match\n   * situation.\n   * @property {function(callback:FieldOnClickCallback):Form} onClick - Transform\n   * list of fields on click event of any provided field\n   * @property {function(callback:OnSubmitCallback):Form} onSubmit - Transform original submit\n   * data, use this API if you would like to provide field data programatically.\n   * @property {function(callback:OnErrorCallback):Form} onError - Trigger callback when error\n   * occurs. For example, when providing incorrect submit data.\n   * @property {function(formData:FormData):Promise<void,Error>} submit - Submit form with provided data.\n   ",
              "start": 6205,
              "end": 6947,
              "loc": {
                "start": {
                  "line": 160,
                  "column": 2
                },
                "end": {
                  "line": 171,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} RenderCallback\n   * @return {HTMLElement|null} If provides an HTMLElement, original component will not be rendered;\n   * if provides null, use original component instead.\n   ",
              "start": 6951,
              "end": 7156,
              "loc": {
                "start": {
                  "line": 173,
                  "column": 2
                },
                "end": {
                  "line": 177,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {function} AttachTabCallback\n   * @param {object} param - Parameters used to render tab\n   * @return {HTMLElement|null} If `null` is provided, this tab will be hide temporarily; otherwise,\n   * HTMLElement will be append to this tab.\n   ",
              "start": 7160,
              "end": 7417,
              "loc": {
                "start": {
                  "line": 179,
                  "column": 2
                },
                "end": {
                  "line": 184,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {object} AttachTabVisitor\n   * @property {string} type - Any display name of tab\n   * @property {AttachTabCallback} callback - Render callback function\n   ",
              "start": 7421,
              "end": 7596,
              "loc": {
                "start": {
                  "line": 186,
                  "column": 2
                },
                "end": {
                  "line": 190,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {object} ExtendedWindow\n   * @property {function(tab:string,callback:AttachTabCallback):ExtendedWindow|function(visitor:AttachTabVisitor):ExtendedWindow} attachTab -\n   * Extends extra window with one more tab.\n   * @property {function(tab:?string,param:?object):Promise<void,Error>} show - Display specific\n   * extended tab, rendering the tab with given parameters. If none `tab` is provided, it will\n   * display default tab if there is any.\n   * @property {function():Promise<void,Error>} hide - Hide extra extended window.\n   ",
              "start": 7600,
              "end": 8151,
              "loc": {
                "start": {
                  "line": 192,
                  "column": 2
                },
                "end": {
                  "line": 200,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n   * @typedef {Object} ChatWindow\n   * @property {number} campaignId - Campaign id\n   * @property {function():Promise<void,Error>} minimize - Minimize current chat window\n   * @property {function(callback:function):ChatWindow} onMinimize - Register callback which will be\n   * called when chat window is minimized.\n   * @property {function():Promise<void,Error>} close - Close current chat window\n   * @property {function(callback:function):ChatWindow} onClose - Register callback which will\n   * be called when chat window is closed\n   * @property {function():Promise<void,Error>} endChat - End current chat\n   * @property {function(callback:function):ChatWindow} onEndChat - Register callback which will\n   * be called when chat is ended\n   * @property {function():Promise<void,Error>} restore - Restore current chat window\n   * @property {function(callback:function):ChatWindow} onRestore - Register callback which will\n   * be called when chat window is restored\n   * @property {function(callback:function):ChatWindow} onAgentJoinChat - Register callback which will\n   * be called when agent joins the chat. Agent info will be provided.\n   * @property {function(type:string,callback:RenderCallback):ChatWindow} onRender -\n   * Render customized element. If callback provies an HTMLElement, original component will not be\n   * rendered; if provides null, use original component instead.\n   *\n   * Function also accepts a visitor for multiple callback registration.\n   *\n   * Possible render types are:\n   * + 'prechat.header'\n   * + 'prechat.content'\n   * + 'prechat.footer'\n   * + 'chat.header'\n   * + 'chat.content'\n   * + 'chat.input'\n   * + 'chat.footer'\n   * + 'postchat.header'\n   * + 'postchat.content'\n   * + 'postchat.footer'\n   * + 'offline.header'\n   * + 'offline.content'\n   * + 'offline.footer'\n   * + '*.header'\n   * + '*.content'\n   * + '*.footer'\n   * @property {Form} prechatForm - Useful api to get/set prechat form\n   * @property {Form} postchatForm - Useful api to get/set postchat form\n   * @property {Form} offlineForm - Useful api to get/set offline message form\n   * @property {ChatContent} chatContent - Useful api to get/set chat content\n   * @property {ExtendedWindow} extendedWindow - Useful api to get/set extended window\n   ",
              "start": 8155,
              "end": 10418,
              "loc": {
                "start": {
                  "line": 202,
                  "column": 2
                },
                "end": {
                  "line": 247,
                  "column": 5
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @property {function(app:App):void} onAppReady - API that will be triggered when live chat app is ready, which is after JavaScript has been\n * downloaded and initialized.\n * @property {function(button:Button):boolean} onButtonWillDisplay - API that will be triggered before certain button is rendered, providing useful API to get/set\n * the button, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current button.\n * @property {function(invitation:Invitation):boolean} onInvitationWillDisplay - API that will be triggered before certain invitation is rendered, providing useful API to get/set\n * the invitation, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current invitation.\n * @property {function(chatWindow:ChatWindow):boolean} onWindowWillDisplay - API that will be triggered before chat window is rendered, providing useful API to get/set\n * the chat window, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current chat window.\n * @property {number} site_id - Site Id\n * @property {function():void} onLiveChatCodeLoaded - API that will be triggered when live chat app is ready, which is after JavaScript has been\n * downloaded and initialized.\n * @property {function():Promise<void,Error>} ban - Ban visitor\n * @property {boolean} dynamic - Whether uses dynamic campaign\n * @property {function(callback:function):Promise<void,Error>} end_chat - End current chat if there is any\n * @property {function(params:{DOMElement:HTMLElement})} onBeforeImageInvitationDipslay - Triggers before image\n * invitation has been displayed.\n * @property {function(params:{DOMElement:HTMLElement})} onAfterImageInvitationDisplay - Triggers after image\n * invitation has been displayed.\n * @property {function} onChatWindowLoadBegin - @deprecated\n * @property {function} onChatWindowLoaded - @deprecated\n * @property {function} onChatWindowStatusChanged - @deprecated (not in used actually)\n * @property {function(event:Event,campaignId:number):Promise<void,Error>} open_chat_window - Open chat window, where `event` can be\n * a regular Event, it's default behavior will be prevented if provided; `campaignId` is the campaign id\n * @property {function} setIfHideChatWindowLoadingAnimation - @deprecated\n * @property {function(ifSkipPrechat:boolean):Promise<void,Erro>} setIfSkipPrechat - Set if skip prechat form.\n * @property {function(fields:Array<{name:string,value:string}>):Promise<void,Error>} setPrechatFields - Set prechat fields\n ",
              "start": 10420,
              "end": 13054,
              "loc": {
                "start": {
                  "line": 249,
                  "column": 0
                },
                "end": {
                  "line": 279,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        }
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": " eslint-disable ",
      "start": 0,
      "end": 20,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 20
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} CustomVariable\n   * @property {string} name - Name of custom variable\n   * @property {string} value - Value of custom variable\n   ",
      "start": 24,
      "end": 183,
      "loc": {
        "start": {
          "line": 3,
          "column": 2
        },
        "end": {
          "line": 7,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} App\n   * @property {boolean} isMobile - Weather current running environment is mobile device.\n   * @property {function(list:CustomVariable[]):void} setCustomVariable - Set custom variable.\n   ",
      "start": 187,
      "end": 408,
      "loc": {
        "start": {
          "line": 9,
          "column": 2
        },
        "end": {
          "line": 13,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} onStatusChangeCallback\n   * @param {boolean} online - Whether current status is online\n   * @return {void}\n   ",
      "start": 412,
      "end": 553,
      "loc": {
        "start": {
          "line": 15,
          "column": 2
        },
        "end": {
          "line": 19,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Button\n   * @property {string} type - Type of button, possible options are:\n   * + monitor - monitor button\n   * + text - text button\n   * + static - static image button\n   * + float - float image button\n   * + mobile-image - mobile image button\n   * + mobile-text - mobile text button\n   * + adaptive - adaptive button\n   * @property {number} id - Campaign id of button\n   * @property {function():Promise<void,Error>} click - Simulate click behavior, the same as user click on this chat\n   * button.\n   * @property {function(callback:onStatusChangeCallback):void} onStatusChange - Register callback,\n   * which will be notified when status of current campaign changed.\n   ",
      "start": 557,
      "end": 1259,
      "loc": {
        "start": {
          "line": 21,
          "column": 2
        },
        "end": {
          "line": 36,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Agent\n   * @property {number} id - Uniq of agent\n   * @property {string} name - Display name of agent\n   * @property {string} avatar - Source of avatar image\n   * @property {string} bio - Bio description of agent\n   * @property {string} title - Title of agent\n   ",
      "start": 1263,
      "end": 1555,
      "loc": {
        "start": {
          "line": 38,
          "column": 2
        },
        "end": {
          "line": 45,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Invitation\n   * @property {string} type - Type of invitation, possible options are:\n   * + image - image invitation\n   * + adaptive - adaptive invitation\n   * + embedded-window - popup embedded chat window directly\n   * + mobile - mobile invitation\n    * @property {string} message - Message of current invitation.\n  * @property {Agent} agent - Agent info, will only be provided if it's a manual invitation.\n  * @property {function():Promise<void,Error>} accept - Accept invitation manually\n  * @property {function():Promise<void,Error>} refuse - Refuse invitation manually\n  * @property {function(callback:function)} onAccept - Register callback function when invitation is\n  * accepted (either by visitor or programatically).\n  * @property {function(callback:function)} onRefuse - Register callback function when invitation is\n  * refused.\n  ",
      "start": 1559,
      "end": 2432,
      "loc": {
        "start": {
          "line": 47,
          "column": 2
        },
        "end": {
          "line": 62,
          "column": 4
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Message\n   * @property {string} type - Type of message\n   * @property {{type:string,name:string}} sender - Sender of message, possible types of sender are:\n   * + 'visitor'\n   * + 'agent'\n   * + 'system'\n   * @property {Date} time - Creating time of this message\n   * @property {string|object} content - Detailed content of message\n   ",
      "start": 2436,
      "end": 2800,
      "loc": {
        "start": {
          "line": 64,
          "column": 2
        },
        "end": {
          "line": 73,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} MessagesOnChangeCallback\n   * @param {Array<Message>} messages - Current version of messages\n   * @return {Array<Message>} messages that should be displayed\n   ",
      "start": 2804,
      "end": 2995,
      "loc": {
        "start": {
          "line": 75,
          "column": 2
        },
        "end": {
          "line": 79,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} SingleMessageOnChangeCallback\n   * @param {Message} message - Current version of message\n   * @param {number} index - Index of current message (in messasge list)\n   * @param {Array<Message>} messages - The complete message list\n   * @return {Message|null|Array<Message>} The transformed message. If `null` is provided, this\n   * message will be removed from list; if a list of message is provided, all of them will be rendered\n   * in list.\n   ",
      "start": 2999,
      "end": 3474,
      "loc": {
        "start": {
          "line": 81,
          "column": 2
        },
        "end": {
          "line": 89,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} ChatContent\n   * @property {function(callback:MessagesOnChangeCallback):void|{type:string,callback:SingleMessageOnChangeCallback}} onChange - Register callback function to\n   * transform message in list.\n   ",
      "start": 3478,
      "end": 3714,
      "loc": {
        "start": {
          "line": 91,
          "column": 2
        },
        "end": {
          "line": 95,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Field\n   * @property {string} type - Type of field, possible types are:\n   * + input - single line input field\n   * + textarea - Multiple line input field\n   * + radiolist - Group of radio buttons\n   * + checkbox - Single checkbox field\n   * + select - Dropdown list field\n   * + checkboxlist - Group of checkbox\n   * + file - Attachment upload field\n   * + email - Input field that accept email address\n   * + ticket - Input field that accept Comm100 Ticket number\n   * + department - Dropdown list that display available department\n   * + stars - Field for user to rate the chat (select from 1 to 5 stars by default)\n   * + custom - Custom field that display whatever user provide in element property\n   * @property {string} name - Label name of field\n   * @property {string|number} value - Value of current field\n   * @property {boolean} isSystem - Whether the field is system field\n   * @property {string} error - Potential error of this field with current value. This error might\n   * or might not be displayed, usually it will be displayed after field blur or before form submit.\n   * @property {Array<{type:string,name:string}>} options - Possible options of current field, only\n   * valid when type is `select`, `radiobox` or `checkbox`.\n   * @property {HTMLElement} element - Extended element, only valid when type is `custom`\n   ",
      "start": 3718,
      "end": 5086,
      "loc": {
        "start": {
          "line": 97,
          "column": 2
        },
        "end": {
          "line": 120,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} FieldOnChangeCallback\n   * @param {Array<Field>} prevFields - Previous version of fields. For initial run, this will be\n   * default value.\n   * @param {Array<Field>} fields - Current version of fields.\n   * @return {Array<Field>} fields that should be displayed.\n   ",
      "start": 5090,
      "end": 5388,
      "loc": {
        "start": {
          "line": 122,
          "column": 2
        },
        "end": {
          "line": 128,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} FieldOnClickCallback\n   * @param {string} id - Field id.\n   * @param {Array<Field>} fields - Current version of fields\n   * @return {Array<Field>} fields that should be displayed\n   ",
      "start": 5392,
      "end": 5605,
      "loc": {
        "start": {
          "line": 130,
          "column": 2
        },
        "end": {
          "line": 135,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} FormData\n   * @property {string} name\n   * @property {string} email\n   * @property {string} phone\n   * @property {string} company\n   * @property {int} ticketId\n   * @property {int} departmentId\n   * @property {string} productService\n   * @property {Array<{name:string,value:string}>} customFields\n   ",
      "start": 5609,
      "end": 5938,
      "loc": {
        "start": {
          "line": 137,
          "column": 2
        },
        "end": {
          "line": 147,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} OnSubmitCallback\n   * @param {FormData} formData - Current form data.\n   * @return {Object} form data that should be submitted.\n   ",
      "start": 5942,
      "end": 6104,
      "loc": {
        "start": {
          "line": 149,
          "column": 2
        },
        "end": {
          "line": 153,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} OnErrorCallback\n   * @param {Error} error - Occured error.\n   ",
      "start": 6108,
      "end": 6201,
      "loc": {
        "start": {
          "line": 155,
          "column": 2
        },
        "end": {
          "line": 158,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Form\n   * @property {function(callback:FieldOnChangeCallback):Form} onChange - Transform original fields to match\n   * situation.\n   * @property {function(callback:FieldOnClickCallback):Form} onClick - Transform\n   * list of fields on click event of any provided field\n   * @property {function(callback:OnSubmitCallback):Form} onSubmit - Transform original submit\n   * data, use this API if you would like to provide field data programatically.\n   * @property {function(callback:OnErrorCallback):Form} onError - Trigger callback when error\n   * occurs. For example, when providing incorrect submit data.\n   * @property {function(formData:FormData):Promise<void,Error>} submit - Submit form with provided data.\n   ",
      "start": 6205,
      "end": 6947,
      "loc": {
        "start": {
          "line": 160,
          "column": 2
        },
        "end": {
          "line": 171,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} RenderCallback\n   * @return {HTMLElement|null} If provides an HTMLElement, original component will not be rendered;\n   * if provides null, use original component instead.\n   ",
      "start": 6951,
      "end": 7156,
      "loc": {
        "start": {
          "line": 173,
          "column": 2
        },
        "end": {
          "line": 177,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} AttachTabCallback\n   * @param {object} param - Parameters used to render tab\n   * @return {HTMLElement|null} If `null` is provided, this tab will be hide temporarily; otherwise,\n   * HTMLElement will be append to this tab.\n   ",
      "start": 7160,
      "end": 7417,
      "loc": {
        "start": {
          "line": 179,
          "column": 2
        },
        "end": {
          "line": 184,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {object} AttachTabVisitor\n   * @property {string} type - Any display name of tab\n   * @property {AttachTabCallback} callback - Render callback function\n   ",
      "start": 7421,
      "end": 7596,
      "loc": {
        "start": {
          "line": 186,
          "column": 2
        },
        "end": {
          "line": 190,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {object} ExtendedWindow\n   * @property {function(tab:string,callback:AttachTabCallback):ExtendedWindow|function(visitor:AttachTabVisitor):ExtendedWindow} attachTab -\n   * Extends extra window with one more tab.\n   * @property {function(tab:?string,param:?object):Promise<void,Error>} show - Display specific\n   * extended tab, rendering the tab with given parameters. If none `tab` is provided, it will\n   * display default tab if there is any.\n   * @property {function():Promise<void,Error>} hide - Hide extra extended window.\n   ",
      "start": 7600,
      "end": 8151,
      "loc": {
        "start": {
          "line": 192,
          "column": 2
        },
        "end": {
          "line": 200,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} ChatWindow\n   * @property {number} campaignId - Campaign id\n   * @property {function():Promise<void,Error>} minimize - Minimize current chat window\n   * @property {function(callback:function):ChatWindow} onMinimize - Register callback which will be\n   * called when chat window is minimized.\n   * @property {function():Promise<void,Error>} close - Close current chat window\n   * @property {function(callback:function):ChatWindow} onClose - Register callback which will\n   * be called when chat window is closed\n   * @property {function():Promise<void,Error>} endChat - End current chat\n   * @property {function(callback:function):ChatWindow} onEndChat - Register callback which will\n   * be called when chat is ended\n   * @property {function():Promise<void,Error>} restore - Restore current chat window\n   * @property {function(callback:function):ChatWindow} onRestore - Register callback which will\n   * be called when chat window is restored\n   * @property {function(callback:function):ChatWindow} onAgentJoinChat - Register callback which will\n   * be called when agent joins the chat. Agent info will be provided.\n   * @property {function(type:string,callback:RenderCallback):ChatWindow} onRender -\n   * Render customized element. If callback provies an HTMLElement, original component will not be\n   * rendered; if provides null, use original component instead.\n   *\n   * Function also accepts a visitor for multiple callback registration.\n   *\n   * Possible render types are:\n   * + 'prechat.header'\n   * + 'prechat.content'\n   * + 'prechat.footer'\n   * + 'chat.header'\n   * + 'chat.content'\n   * + 'chat.input'\n   * + 'chat.footer'\n   * + 'postchat.header'\n   * + 'postchat.content'\n   * + 'postchat.footer'\n   * + 'offline.header'\n   * + 'offline.content'\n   * + 'offline.footer'\n   * + '*.header'\n   * + '*.content'\n   * + '*.footer'\n   * @property {Form} prechatForm - Useful api to get/set prechat form\n   * @property {Form} postchatForm - Useful api to get/set postchat form\n   * @property {Form} offlineForm - Useful api to get/set offline message form\n   * @property {ChatContent} chatContent - Useful api to get/set chat content\n   * @property {ExtendedWindow} extendedWindow - Useful api to get/set extended window\n   ",
      "start": 8155,
      "end": 10418,
      "loc": {
        "start": {
          "line": 202,
          "column": 2
        },
        "end": {
          "line": 247,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @property {function(app:App):void} onAppReady - API that will be triggered when live chat app is ready, which is after JavaScript has been\n * downloaded and initialized.\n * @property {function(button:Button):boolean} onButtonWillDisplay - API that will be triggered before certain button is rendered, providing useful API to get/set\n * the button, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current button.\n * @property {function(invitation:Invitation):boolean} onInvitationWillDisplay - API that will be triggered before certain invitation is rendered, providing useful API to get/set\n * the invitation, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current invitation.\n * @property {function(chatWindow:ChatWindow):boolean} onWindowWillDisplay - API that will be triggered before chat window is rendered, providing useful API to get/set\n * the chat window, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current chat window.\n * @property {number} site_id - Site Id\n * @property {function():void} onLiveChatCodeLoaded - API that will be triggered when live chat app is ready, which is after JavaScript has been\n * downloaded and initialized.\n * @property {function():Promise<void,Error>} ban - Ban visitor\n * @property {boolean} dynamic - Whether uses dynamic campaign\n * @property {function(callback:function):Promise<void,Error>} end_chat - End current chat if there is any\n * @property {function(params:{DOMElement:HTMLElement})} onBeforeImageInvitationDipslay - Triggers before image\n * invitation has been displayed.\n * @property {function(params:{DOMElement:HTMLElement})} onAfterImageInvitationDisplay - Triggers after image\n * invitation has been displayed.\n * @property {function} onChatWindowLoadBegin - @deprecated\n * @property {function} onChatWindowLoaded - @deprecated\n * @property {function} onChatWindowStatusChanged - @deprecated (not in used actually)\n * @property {function(event:Event,campaignId:number):Promise<void,Error>} open_chat_window - Open chat window, where `event` can be\n * a regular Event, it's default behavior will be prevented if provided; `campaignId` is the campaign id\n * @property {function} setIfHideChatWindowLoadingAnimation - @deprecated\n * @property {function(ifSkipPrechat:boolean):Promise<void,Erro>} setIfSkipPrechat - Set if skip prechat form.\n * @property {function(fields:Array<{name:string,value:string}>):Promise<void,Error>} setPrechatFields - Set prechat fields\n ",
      "start": 10420,
      "end": 13054,
      "loc": {
        "start": {
          "line": 249,
          "column": 0
        },
        "end": {
          "line": 279,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": " eslint-disable ",
      "start": 0,
      "end": 20,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 20
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} CustomVariable\n   * @property {string} name - Name of custom variable\n   * @property {string} value - Value of custom variable\n   ",
      "start": 24,
      "end": 183,
      "loc": {
        "start": {
          "line": 3,
          "column": 2
        },
        "end": {
          "line": 7,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} App\n   * @property {boolean} isMobile - Weather current running environment is mobile device.\n   * @property {function(list:CustomVariable[]):void} setCustomVariable - Set custom variable.\n   ",
      "start": 187,
      "end": 408,
      "loc": {
        "start": {
          "line": 9,
          "column": 2
        },
        "end": {
          "line": 13,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} onStatusChangeCallback\n   * @param {boolean} online - Whether current status is online\n   * @return {void}\n   ",
      "start": 412,
      "end": 553,
      "loc": {
        "start": {
          "line": 15,
          "column": 2
        },
        "end": {
          "line": 19,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Button\n   * @property {string} type - Type of button, possible options are:\n   * + monitor - monitor button\n   * + text - text button\n   * + static - static image button\n   * + float - float image button\n   * + mobile-image - mobile image button\n   * + mobile-text - mobile text button\n   * + adaptive - adaptive button\n   * @property {number} id - Campaign id of button\n   * @property {function():Promise<void,Error>} click - Simulate click behavior, the same as user click on this chat\n   * button.\n   * @property {function(callback:onStatusChangeCallback):void} onStatusChange - Register callback,\n   * which will be notified when status of current campaign changed.\n   ",
      "start": 557,
      "end": 1259,
      "loc": {
        "start": {
          "line": 21,
          "column": 2
        },
        "end": {
          "line": 36,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Agent\n   * @property {number} id - Uniq of agent\n   * @property {string} name - Display name of agent\n   * @property {string} avatar - Source of avatar image\n   * @property {string} bio - Bio description of agent\n   * @property {string} title - Title of agent\n   ",
      "start": 1263,
      "end": 1555,
      "loc": {
        "start": {
          "line": 38,
          "column": 2
        },
        "end": {
          "line": 45,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Invitation\n   * @property {string} type - Type of invitation, possible options are:\n   * + image - image invitation\n   * + adaptive - adaptive invitation\n   * + embedded-window - popup embedded chat window directly\n   * + mobile - mobile invitation\n    * @property {string} message - Message of current invitation.\n  * @property {Agent} agent - Agent info, will only be provided if it's a manual invitation.\n  * @property {function():Promise<void,Error>} accept - Accept invitation manually\n  * @property {function():Promise<void,Error>} refuse - Refuse invitation manually\n  * @property {function(callback:function)} onAccept - Register callback function when invitation is\n  * accepted (either by visitor or programatically).\n  * @property {function(callback:function)} onRefuse - Register callback function when invitation is\n  * refused.\n  ",
      "start": 1559,
      "end": 2432,
      "loc": {
        "start": {
          "line": 47,
          "column": 2
        },
        "end": {
          "line": 62,
          "column": 4
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Message\n   * @property {string} type - Type of message\n   * @property {{type:string,name:string}} sender - Sender of message, possible types of sender are:\n   * + 'visitor'\n   * + 'agent'\n   * + 'system'\n   * @property {Date} time - Creating time of this message\n   * @property {string|object} content - Detailed content of message\n   ",
      "start": 2436,
      "end": 2800,
      "loc": {
        "start": {
          "line": 64,
          "column": 2
        },
        "end": {
          "line": 73,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} MessagesOnChangeCallback\n   * @param {Array<Message>} messages - Current version of messages\n   * @return {Array<Message>} messages that should be displayed\n   ",
      "start": 2804,
      "end": 2995,
      "loc": {
        "start": {
          "line": 75,
          "column": 2
        },
        "end": {
          "line": 79,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} SingleMessageOnChangeCallback\n   * @param {Message} message - Current version of message\n   * @param {number} index - Index of current message (in messasge list)\n   * @param {Array<Message>} messages - The complete message list\n   * @return {Message|null|Array<Message>} The transformed message. If `null` is provided, this\n   * message will be removed from list; if a list of message is provided, all of them will be rendered\n   * in list.\n   ",
      "start": 2999,
      "end": 3474,
      "loc": {
        "start": {
          "line": 81,
          "column": 2
        },
        "end": {
          "line": 89,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} ChatContent\n   * @property {function(callback:MessagesOnChangeCallback):void|{type:string,callback:SingleMessageOnChangeCallback}} onChange - Register callback function to\n   * transform message in list.\n   ",
      "start": 3478,
      "end": 3714,
      "loc": {
        "start": {
          "line": 91,
          "column": 2
        },
        "end": {
          "line": 95,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Field\n   * @property {string} type - Type of field, possible types are:\n   * + input - single line input field\n   * + textarea - Multiple line input field\n   * + radiolist - Group of radio buttons\n   * + checkbox - Single checkbox field\n   * + select - Dropdown list field\n   * + checkboxlist - Group of checkbox\n   * + file - Attachment upload field\n   * + email - Input field that accept email address\n   * + ticket - Input field that accept Comm100 Ticket number\n   * + department - Dropdown list that display available department\n   * + stars - Field for user to rate the chat (select from 1 to 5 stars by default)\n   * + custom - Custom field that display whatever user provide in element property\n   * @property {string} name - Label name of field\n   * @property {string|number} value - Value of current field\n   * @property {boolean} isSystem - Whether the field is system field\n   * @property {string} error - Potential error of this field with current value. This error might\n   * or might not be displayed, usually it will be displayed after field blur or before form submit.\n   * @property {Array<{type:string,name:string}>} options - Possible options of current field, only\n   * valid when type is `select`, `radiobox` or `checkbox`.\n   * @property {HTMLElement} element - Extended element, only valid when type is `custom`\n   ",
      "start": 3718,
      "end": 5086,
      "loc": {
        "start": {
          "line": 97,
          "column": 2
        },
        "end": {
          "line": 120,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} FieldOnChangeCallback\n   * @param {Array<Field>} prevFields - Previous version of fields. For initial run, this will be\n   * default value.\n   * @param {Array<Field>} fields - Current version of fields.\n   * @return {Array<Field>} fields that should be displayed.\n   ",
      "start": 5090,
      "end": 5388,
      "loc": {
        "start": {
          "line": 122,
          "column": 2
        },
        "end": {
          "line": 128,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} FieldOnClickCallback\n   * @param {string} id - Field id.\n   * @param {Array<Field>} fields - Current version of fields\n   * @return {Array<Field>} fields that should be displayed\n   ",
      "start": 5392,
      "end": 5605,
      "loc": {
        "start": {
          "line": 130,
          "column": 2
        },
        "end": {
          "line": 135,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} FormData\n   * @property {string} name\n   * @property {string} email\n   * @property {string} phone\n   * @property {string} company\n   * @property {int} ticketId\n   * @property {int} departmentId\n   * @property {string} productService\n   * @property {Array<{name:string,value:string}>} customFields\n   ",
      "start": 5609,
      "end": 5938,
      "loc": {
        "start": {
          "line": 137,
          "column": 2
        },
        "end": {
          "line": 147,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} OnSubmitCallback\n   * @param {FormData} formData - Current form data.\n   * @return {Object} form data that should be submitted.\n   ",
      "start": 5942,
      "end": 6104,
      "loc": {
        "start": {
          "line": 149,
          "column": 2
        },
        "end": {
          "line": 153,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} OnErrorCallback\n   * @param {Error} error - Occured error.\n   ",
      "start": 6108,
      "end": 6201,
      "loc": {
        "start": {
          "line": 155,
          "column": 2
        },
        "end": {
          "line": 158,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} Form\n   * @property {function(callback:FieldOnChangeCallback):Form} onChange - Transform original fields to match\n   * situation.\n   * @property {function(callback:FieldOnClickCallback):Form} onClick - Transform\n   * list of fields on click event of any provided field\n   * @property {function(callback:OnSubmitCallback):Form} onSubmit - Transform original submit\n   * data, use this API if you would like to provide field data programatically.\n   * @property {function(callback:OnErrorCallback):Form} onError - Trigger callback when error\n   * occurs. For example, when providing incorrect submit data.\n   * @property {function(formData:FormData):Promise<void,Error>} submit - Submit form with provided data.\n   ",
      "start": 6205,
      "end": 6947,
      "loc": {
        "start": {
          "line": 160,
          "column": 2
        },
        "end": {
          "line": 171,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} RenderCallback\n   * @return {HTMLElement|null} If provides an HTMLElement, original component will not be rendered;\n   * if provides null, use original component instead.\n   ",
      "start": 6951,
      "end": 7156,
      "loc": {
        "start": {
          "line": 173,
          "column": 2
        },
        "end": {
          "line": 177,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {function} AttachTabCallback\n   * @param {object} param - Parameters used to render tab\n   * @return {HTMLElement|null} If `null` is provided, this tab will be hide temporarily; otherwise,\n   * HTMLElement will be append to this tab.\n   ",
      "start": 7160,
      "end": 7417,
      "loc": {
        "start": {
          "line": 179,
          "column": 2
        },
        "end": {
          "line": 184,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {object} AttachTabVisitor\n   * @property {string} type - Any display name of tab\n   * @property {AttachTabCallback} callback - Render callback function\n   ",
      "start": 7421,
      "end": 7596,
      "loc": {
        "start": {
          "line": 186,
          "column": 2
        },
        "end": {
          "line": 190,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {object} ExtendedWindow\n   * @property {function(tab:string,callback:AttachTabCallback):ExtendedWindow|function(visitor:AttachTabVisitor):ExtendedWindow} attachTab -\n   * Extends extra window with one more tab.\n   * @property {function(tab:?string,param:?object):Promise<void,Error>} show - Display specific\n   * extended tab, rendering the tab with given parameters. If none `tab` is provided, it will\n   * display default tab if there is any.\n   * @property {function():Promise<void,Error>} hide - Hide extra extended window.\n   ",
      "start": 7600,
      "end": 8151,
      "loc": {
        "start": {
          "line": 192,
          "column": 2
        },
        "end": {
          "line": 200,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * @typedef {Object} ChatWindow\n   * @property {number} campaignId - Campaign id\n   * @property {function():Promise<void,Error>} minimize - Minimize current chat window\n   * @property {function(callback:function):ChatWindow} onMinimize - Register callback which will be\n   * called when chat window is minimized.\n   * @property {function():Promise<void,Error>} close - Close current chat window\n   * @property {function(callback:function):ChatWindow} onClose - Register callback which will\n   * be called when chat window is closed\n   * @property {function():Promise<void,Error>} endChat - End current chat\n   * @property {function(callback:function):ChatWindow} onEndChat - Register callback which will\n   * be called when chat is ended\n   * @property {function():Promise<void,Error>} restore - Restore current chat window\n   * @property {function(callback:function):ChatWindow} onRestore - Register callback which will\n   * be called when chat window is restored\n   * @property {function(callback:function):ChatWindow} onAgentJoinChat - Register callback which will\n   * be called when agent joins the chat. Agent info will be provided.\n   * @property {function(type:string,callback:RenderCallback):ChatWindow} onRender -\n   * Render customized element. If callback provies an HTMLElement, original component will not be\n   * rendered; if provides null, use original component instead.\n   *\n   * Function also accepts a visitor for multiple callback registration.\n   *\n   * Possible render types are:\n   * + 'prechat.header'\n   * + 'prechat.content'\n   * + 'prechat.footer'\n   * + 'chat.header'\n   * + 'chat.content'\n   * + 'chat.input'\n   * + 'chat.footer'\n   * + 'postchat.header'\n   * + 'postchat.content'\n   * + 'postchat.footer'\n   * + 'offline.header'\n   * + 'offline.content'\n   * + 'offline.footer'\n   * + '*.header'\n   * + '*.content'\n   * + '*.footer'\n   * @property {Form} prechatForm - Useful api to get/set prechat form\n   * @property {Form} postchatForm - Useful api to get/set postchat form\n   * @property {Form} offlineForm - Useful api to get/set offline message form\n   * @property {ChatContent} chatContent - Useful api to get/set chat content\n   * @property {ExtendedWindow} extendedWindow - Useful api to get/set extended window\n   ",
      "start": 8155,
      "end": 10418,
      "loc": {
        "start": {
          "line": 202,
          "column": 2
        },
        "end": {
          "line": 247,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @property {function(app:App):void} onAppReady - API that will be triggered when live chat app is ready, which is after JavaScript has been\n * downloaded and initialized.\n * @property {function(button:Button):boolean} onButtonWillDisplay - API that will be triggered before certain button is rendered, providing useful API to get/set\n * the button, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current button.\n * @property {function(invitation:Invitation):boolean} onInvitationWillDisplay - API that will be triggered before certain invitation is rendered, providing useful API to get/set\n * the invitation, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current invitation.\n * @property {function(chatWindow:ChatWindow):boolean} onWindowWillDisplay - API that will be triggered before chat window is rendered, providing useful API to get/set\n * the chat window, also provide feature to prevent rendering if necessary. If function returns `false`,\n * it will prevent rendering current chat window.\n * @property {number} site_id - Site Id\n * @property {function():void} onLiveChatCodeLoaded - API that will be triggered when live chat app is ready, which is after JavaScript has been\n * downloaded and initialized.\n * @property {function():Promise<void,Error>} ban - Ban visitor\n * @property {boolean} dynamic - Whether uses dynamic campaign\n * @property {function(callback:function):Promise<void,Error>} end_chat - End current chat if there is any\n * @property {function(params:{DOMElement:HTMLElement})} onBeforeImageInvitationDipslay - Triggers before image\n * invitation has been displayed.\n * @property {function(params:{DOMElement:HTMLElement})} onAfterImageInvitationDisplay - Triggers after image\n * invitation has been displayed.\n * @property {function} onChatWindowLoadBegin - @deprecated\n * @property {function} onChatWindowLoaded - @deprecated\n * @property {function} onChatWindowStatusChanged - @deprecated (not in used actually)\n * @property {function(event:Event,campaignId:number):Promise<void,Error>} open_chat_window - Open chat window, where `event` can be\n * a regular Event, it's default behavior will be prevented if provided; `campaignId` is the campaign id\n * @property {function} setIfHideChatWindowLoadingAnimation - @deprecated\n * @property {function(ifSkipPrechat:boolean):Promise<void,Erro>} setIfSkipPrechat - Set if skip prechat form.\n * @property {function(fields:Array<{name:string,value:string}>):Promise<void,Error>} setPrechatFields - Set prechat fields\n ",
      "start": 10420,
      "end": 13054,
      "loc": {
        "start": {
          "line": 249,
          "column": 0
        },
        "end": {
          "line": 279,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 13055,
      "end": 13060,
      "loc": {
        "start": {
          "line": 280,
          "column": 0
        },
        "end": {
          "line": 280,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Comm100API",
      "start": 13061,
      "end": 13071,
      "loc": {
        "start": {
          "line": 280,
          "column": 6
        },
        "end": {
          "line": 280,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 13072,
      "end": 13073,
      "loc": {
        "start": {
          "line": 280,
          "column": 17
        },
        "end": {
          "line": 280,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13074,
      "end": 13075,
      "loc": {
        "start": {
          "line": 280,
          "column": 19
        },
        "end": {
          "line": 280,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13076,
      "end": 13077,
      "loc": {
        "start": {
          "line": 280,
          "column": 21
        },
        "end": {
          "line": 280,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13077,
      "end": 13078,
      "loc": {
        "start": {
          "line": 280,
          "column": 22
        },
        "end": {
          "line": 280,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 13080,
      "end": 13086,
      "loc": {
        "start": {
          "line": 282,
          "column": 0
        },
        "end": {
          "line": 282,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "default",
        "keyword": "default",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "default",
      "start": 13087,
      "end": 13094,
      "loc": {
        "start": {
          "line": 282,
          "column": 7
        },
        "end": {
          "line": 282,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Comm100API",
      "start": 13095,
      "end": 13105,
      "loc": {
        "start": {
          "line": 282,
          "column": 15
        },
        "end": {
          "line": 282,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13105,
      "end": 13106,
      "loc": {
        "start": {
          "line": 282,
          "column": 25
        },
        "end": {
          "line": 282,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13107,
      "end": 13107,
      "loc": {
        "start": {
          "line": 283,
          "column": 0
        },
        "end": {
          "line": 283,
          "column": 0
        }
      }
    }
  ]
}